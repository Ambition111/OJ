/*
有n个盒子。给你一个长度为n的二进制字符串boxes，其中 boxes[i]的值为'0'表示第i个盒子是空的，而boxes[i]的值为'1'表示盒子里有一个小球。
在一步操作中，你可以将一个小球从某个盒子移动到一个与之相邻的盒子中。第i个盒子和第j个盒子相邻需满足abs(i - j) == 1。
注意，操作执行后，某些盒子中可能会存在不止一个小球。

返回一个长度为n的数组 answer ，其中 answer[i] 是将所有小球移动到第 i 个盒子所需的最小操作数。
每个 answer[i] 都需要根据盒子的 初始状态 进行计算。

示例 1：
输入：boxes = "110"
输出：[1,1,3]
解释：每个盒子对应的最小操作数如下：
1) 第 1 个盒子：将一个小球从第 2 个盒子移动到第 1 个盒子，需要 1 步操作。
2) 第 2 个盒子：将一个小球从第 1 个盒子移动到第 2 个盒子，需要 1 步操作。
3) 第 3 个盒子：将一个小球从第 1 个盒子移动到第 3 个盒子，需要 2 步操作。
	将一个小球从第 2 个盒子移动到第 3 个盒子，需要 1 步操作。共计 3 步操作。
	
示例 2：
输入：boxes = "001011"
输出：[11,8,5,4,3,4]
*/
class Solution {
public:
    vector<int> minOperations(string boxes) {
        vector<int> v(boxes.size(), 0);

        int j = 0;
        for (int i = 0; boxes[i] != '\0'; ++i)
        {
            if (boxes[i] == '1')
            {
                while (j < v.size())
                {
                    v[j++] += abs(i - j);
                }
                j = 0;
            }
        }
        return v;
    }
};
